@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using TravelItineraryProject.Data

@inject SignInManager<TravelItineraryProjectUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="login-container">
    <div class="login-form">
        <section>
            <h2 class="login-title">Log in</h2>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="input-group">
                    <span class="icon">&#128231;</span>
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" placeholder="Email or phone number" />
                </div>
                <ValidationMessage For="() => Input.Email" class="text-danger" />

                <div class="input-group">
                    <span class="icon">&#128274;</span>
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" placeholder="Password" />
                </div>
                <ValidationMessage For="() => Input.Password" class="text-danger" />

                <div class="checkbox mb-3">
                    <label>
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                        Remember me
                    </label>
                </div>

                <button type="submit" class="btn-login">Login</button>

                <div class="login-links">
                    <a href="Account/ForgotPassword">Forgot your password?</a>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("User/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Sign up</a>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="login-image">
        <img src="/images/Computer.jpg" alt="Illustration" />
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        height: 100vh;
        padding: 20px;
        background: linear-gradient(to right, #e6f7f8, #d1eaff);
    }

    .login-form {
        width: 40%;
        background: white;
        padding: 40px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .login-title {
        text-align: center;
        margin-bottom: 20px;
    }

    .input-group {
        display: flex;
        align-items: center;
        background: #f1f5f8;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 15px;
    }

    .icon {
        margin-right: 10px;
    }

    .btn-login {
        width: 100%;
        padding: 10px;
        background: #00a19c;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
    }

    .login-links {
        text-align: center;
        margin-top: 10px;
    }

        .login-links a {
            display: block;
            margin: 5px 0;
            color: #007bff;
            text-decoration: none;
        }

    .login-image {
        width: 50%;
        display: flex;
        justify-content: center;
    }

        .login-image img {
            max-width: 100%;
            height: auto;
        }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}