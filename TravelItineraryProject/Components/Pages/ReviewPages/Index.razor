@page "/reviews"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TravelItineraryProject.Domain
@using TravelItineraryProject.Data
@implements IAsyncDisposable
@rendermode InteractiveServer
@inject IDbContextFactory<TravelItineraryProjectContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>Reviews</PageTitle>

<h1>Reviews</h1>

<p>
    <a href="reviews/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.Review">
    <PropertyColumn Property="review => review.Rating" />
    <PropertyColumn Property="review => review.ReviewDate" />
    <PropertyColumn Property="review => review.Comment" />
    <PropertyColumn Property="review => review.ItineraryId" />
    <AuthorizeView Roles="Administrator, Staff">
        <PropertyColumn Property="review => review.CustomerId" />
        <PropertyColumn Property="review => review.StaffId" Title="CheckedByStaffId" />
        <PropertyColumn Property="review => review.ApprovedByStaff" Title="ApprovalStatus" />
    </AuthorizeView>

    <TemplateColumn Context="review">
        <AuthorizeView Roles="Administrator, User">
            <a href="@($"reviews/edit?reviewid={review.ReviewId}")">Edit</a> |
            <a href="@($"reviews/delete?reviewid={review.ReviewId}")">Delete</a> |
        </AuthorizeView>
        <a href="@($"reviews/details?reviewid={review.ReviewId}")">Details</a>
        <AuthorizeView Roles="Administrator, Staff">
            | <button class="btn @(review.ApprovedByStaff ? "btn-danger" : "btn-success")"
                    @onclick="() => ToggleReviewApproval(review.ReviewId)">
                @(review.ApprovedByStaff ? "Unapprove" : "Approve")
            </button>
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>

@code {
    private TravelItineraryProjectContext context = default!;
    private bool contextInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        // Initialize the DbContext
        context = await DbFactory.CreateDbContextAsync();
        contextInitialized = true;
    }

    private async Task ToggleReviewApproval(int reviewId)
    {
        // Use a new DbContext instance for any updates to avoid concurrency issues
        using var updateContext = await DbFactory.CreateDbContextAsync();
        var review = await updateContext.Review.FindAsync(reviewId);

        if (review != null)
        {
            // Toggle the booking status
            review.ApprovedByStaff = !review.ApprovedByStaff;

            // Get the currently logged-in user's staff ID
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userEmail = authState.User.Identity?.Name;

            if (userEmail != null)
            {
                // Look up the staff member in the database by their email
                var staff = await updateContext.Staff.FirstOrDefaultAsync(s => s.Email == userEmail);

                if (staff != null)
                {
                    // Update the StaffId field with the logged-in staff member's ID
                    review.StaffId = staff.StaffId;
                }
            }

            // Save changes to the database
            await updateContext.SaveChangesAsync();
        }

        // Refresh the bookings list
        await RefreshReviews();
    }

    private async Task RefreshReviews()
    {
        if (!contextInitialized) return;

        // Reload data for context.Booking
        await context.Entry(context.Review).ReloadAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }
}
