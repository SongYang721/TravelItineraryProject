@page "/reviews"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TravelItineraryProject.Domain
@using TravelItineraryProject.Data
@implements IAsyncDisposable
@rendermode InteractiveServer
@inject IDbContextFactory<TravelItineraryProjectContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>Reviews</PageTitle>

<h1>Reviews</h1>

<p>
    <AuthorizeView Roles="Administrator, User">
        <a href="reviews/create">Create New</a>
    </AuthorizeView>
</p>

<QuickGrid Class="table" Items="@reviews">
    <PropertyColumn Property="review => review.Rating" />
    <PropertyColumn Property="review => review.ReviewDate" />
    <PropertyColumn Property="review => review.Comment" />
    <PropertyColumn Property="review => review.Itinerary.Title" />
    <AuthorizeView Roles="Administrator, Staff">
        <PropertyColumn Property="review => review.CustomerId" />
        <PropertyColumn Property="review => review.StaffId" Title="CheckedByStaffId" />
        <PropertyColumn Property="review => review.ApprovedByStaff" Title="ApprovalStatus" />
    </AuthorizeView>

    <TemplateColumn Context="review">
        <AuthorizeView Roles="Administrator, User">
            <a href="@($"reviews/edit?reviewid={review.ReviewId}")">Edit</a> |
            <a href="@($"reviews/delete?reviewid={review.ReviewId}")">Delete</a> |
        </AuthorizeView>
        <a href="@($"reviews/details?reviewid={review.ReviewId}")">Details</a>
        <AuthorizeView Roles="Administrator, Staff">
            | <button class="btn @(review.ApprovedByStaff ? "btn-danger" : "btn-success")"
            @onclick="() => ToggleReviewApproval(review.ReviewId)">
                @(review.ApprovedByStaff ? "Unapprove" : "Approve")
            </button>
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>

@code {
    private TravelItineraryProjectContext context = default!;
    private bool contextInitialized = false;
    private IList<Review> userReviews = new List<Review>();
    IQueryable<Review> reviews => userReviews.AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        // Initialize the DbContext
        context = await DbFactory.CreateDbContextAsync();
        contextInitialized = true;

        await LoadUserReview();
    }

    private async Task LoadUserReview()
    {
        // Get the currently logged-in user's email
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity?.Name;
        if (userEmail != null)
        {
            // Look up the user in the database by their email
            var user = await context.Users.FirstOrDefaultAsync(u => u.Email == userEmail);
            var customer = await context.Customer.FirstOrDefaultAsync(c => c.EmailAddress == userEmail);
            var staff = await context.Staff.FirstOrDefaultAsync(s => s.Email == userEmail);
            if (customer != null)
            {
                // Filter bookings for the current user
                userReviews = await context.Review
                .Include(b => b.Itinerary)
                .Where(b => b.CustomerId == customer.CustomerId).ToListAsync();

                foreach (var review in userReviews)
                {
                    review.Itinerary.Title ??= "N/A"; // Default if null
                }
            }
            if (staff != null)
            {
                userReviews = await context.Review
                .Include(b => b.Itinerary)
                .ToListAsync();

                foreach (var review in userReviews)
                {
                    review.Itinerary.Title ??= "N/A"; // Default if null

                }
            }
        }
    }

    private async Task ToggleReviewApproval(int reviewId)
    {
        // Use a new DbContext instance for any updates to avoid concurrency issues
        using var updateContext = await DbFactory.CreateDbContextAsync();
        var review = await updateContext.Review
            .Include(r => r.Itinerary)  // Ensure itinerary is included when updating
            .FirstOrDefaultAsync(r => r.ReviewId == reviewId);

        if (review != null)
        {
            // Toggle the booking status
            review.ApprovedByStaff = !review.ApprovedByStaff;

            // Get the currently logged-in user's staff ID
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userEmail = authState.User.Identity?.Name;

            if (userEmail != null)
            {
                // Look up the staff member in the database by their email
                var staff = await updateContext.Staff.FirstOrDefaultAsync(s => s.Email == userEmail);

                if (staff != null)
                {
                    // Update the StaffId field with the logged-in staff member's ID
                    review.StaffId = staff.StaffId;
                }
            }

            // Save changes to the database
            await updateContext.SaveChangesAsync();
        }

        // Refresh the reviews list
        await RefreshReviews();
    }

    private async Task RefreshReviews()
    {
        if (!contextInitialized) return;

        await context.Entry(context.Review).ReloadAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }
}

