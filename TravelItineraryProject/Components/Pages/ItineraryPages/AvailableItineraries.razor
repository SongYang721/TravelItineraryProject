@page "/itineraries"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain
@using TravelItineraryProject.Data
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@implements IAsyncDisposable  
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Available Itineraries</PageTitle>

<h1 class="text-center my-4">Available Itineraries</h1>

@if (Itineraries == null || !Itineraries.Any())
{
    <p class="text-center">Loading itineraries...</p>
}
else
{
    <div class="container">
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var itinerary in Itineraries)
            {
                <div class="col">
                    <div class="card h-100 shadow">
                        <img src="@itinerary.ImageUrl" class="card-img-top" alt="Cabin Image" style="height:16vw;">
                        <div class="card-body">
                            <h5 class="card-title">@itinerary.Title</h5>
                            <p class="card-text">
                                <strong>Duration:</strong> @itinerary.Duration days<br>
                                <strong>Price:</strong> $@itinerary.Price<br>
                                <strong>Type:</strong> @itinerary.TypeofTrip<br>
                                @((MarkupString)(itinerary.PromotionAvailable
                                            ? "<span class='badge bg-success'>Promotion Available</span>"
                                            : "<span class='badge bg-secondary'>No Promotion</span>"))
                            </p>
                        </div>
                        <div class="card-footer bg-white">
                            <label>Select Date:</label>
                            <select class="form-control" @bind="SelectedDateRange[itinerary.ItineraryId]">
                                @foreach (var dateRange in itinerary.GetAvailableDateRanges())
                                {
                                    <option value="@dateRange">@dateRange</option>
                                }
                            </select>
                            <button class="btn btn-primary mt-2 w-100"
                            @onclick="() => ProceedToPayment(itinerary.ItineraryId)"
                            disabled="@IsBookingDisabled(itinerary.ItineraryId)">
                                Book Now
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private TravelItineraryProjectContext context = default!; // Database context
    private List<Itinerary> Itineraries = new(); // List to store itineraries
    private Dictionary<int, string> SelectedDateRange = new(); // Stores selected date for each itinerary
    private HashSet<string> ExistingBookings = new(); // Stores existing bookings to prevent duplicates

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        using var dbContext = DbFactory.CreateDbContext();

        // Load all itineraries from the database
        Itineraries = await dbContext.Itinerary.AsQueryable().ToListAsync();

        if (!Itineraries.Any())
        {
            Console.WriteLine("No itineraries found.");
            return;
        }

        var userEmail = authState.User.Identity?.Name;

        if (string.IsNullOrEmpty(userEmail))
        {
            Console.WriteLine("User is not logged in.");
            return;
        }

        // Fetch user data
        var user = await dbContext.Users.FirstOrDefaultAsync(u => u.Email == userEmail);
        if (user == null || user.CustomerId == null)
        {
            Console.WriteLine("User not found or CustomerId is null.");
            return;
        }

        // Fetch user's existing bookings
        var userBookings = await dbContext.Booking
            .Where(b => b.CustomerId == user.CustomerId && b.SelectedDateRange != null)
            .Select(b => $"{b.ItineraryId}-{b.SelectedDateRange}")
            .ToListAsync();

        ExistingBookings = new HashSet<string>(userBookings);

        // Initialize dropdown values for each itinerary
        foreach (var itinerary in Itineraries)
        {
            if ((!SelectedDateRange.ContainsKey(itinerary.ItineraryId)) || (string.IsNullOrEmpty(SelectedDateRange[itinerary.ItineraryId])))
            {
                var firstAvailableDate = itinerary.GetAvailableDateRanges().FirstOrDefault();
                SelectedDateRange[itinerary.ItineraryId] = !string.IsNullOrEmpty(firstAvailableDate) ? firstAvailableDate : "No Available Dates";
            }
        }
        StateHasChanged(); // Refresh UI dynamically
    }

    // Checks if booking is disabled based on existing bookings
    private bool IsBookingDisabled(int itineraryId)
    {
        if (SelectedDateRange.TryGetValue(itineraryId, out var selectedDate))
        {
            return ExistingBookings.Contains($"{itineraryId}-{selectedDate}");
        }
        return false;
    }

    // Navigates to payment page with selected itinerary and date
    private async Task ProceedToPayment(int itineraryId)
    {
        if (!SelectedDateRange.TryGetValue(itineraryId, out var selectedFullRange) || string.IsNullOrEmpty(selectedFullRange))
        {
            Console.WriteLine("Please select a valid date before booking.");
            return;
        }

        StateHasChanged();
        NavigationManager.NavigateTo($"/payments/create?itineraryId={itineraryId}&selectedDateRange={Uri.EscapeDataString(selectedFullRange)}");
    }

    // Cleanup method to release resources and reset UI state
    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            Itineraries.Clear(); // Prevent UI from displaying old data
            SelectedDateRange.Clear(); // Reset dictionary to avoid stale references
            ExistingBookings.Clear(); // Remove old booking state

            NavigationManager.NavigateTo("Account/Login", forceLoad: true);
            await Task.Delay(500);

            await context.DisposeAsync();
            context = null;
        }
    }
    
}





