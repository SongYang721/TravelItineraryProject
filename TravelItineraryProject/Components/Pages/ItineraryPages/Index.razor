@page "/itinerary"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TravelItineraryProject.Domain
@using TravelItineraryProject.Data
@implements IAsyncDisposable
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@attribute [Authorize(Roles = "Administrator, Staff")]

<PageTitle>Itinerary</PageTitle>

<style>
    .itinerary-container {
        max-width: 1100px;
        margin: 40px auto;
        background: #fdf6f0;
        padding: 30px;
        border-radius: 15px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        color: #333;
        text-align: center;
    }

    .itinerary-header {
        font-size: 36px;
        margin-bottom: 25px;
        font-weight: bold;
        color: #d48c5e;
        text-transform: uppercase;
    }

    .itinerary-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        margin-top: 20px;
    }

    .itinerary-card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: left;
    }

    .itinerary-date {
        font-size: 24px;
        font-weight: bold;
        color: #d48c5e;
    }

    .itinerary-title {
        font-size: 20px;
        font-weight: bold;
        margin-top: 10px;
    }

    .itinerary-details {
        font-size: 16px;
        margin-top: 10px;
    }

    .itinerary-actions a {
        margin-right: 10px;
        color: #d48c5e;
        text-decoration: none;
        font-weight: bold;
    }

        .itinerary-actions a:hover {
            text-decoration: underline;
        }
</style>

<div class="itinerary-container">
    <div class="itinerary-header">Vacation Itinerary</div>
    <p>
        <a href="itineraries/create" class="btn btn-primary">Create New</a>
    </p>

    <div class="itinerary-grid">
        @foreach (var itinerary in context.Itinerary)
        {
            <div class="itinerary-card">
                <div class="itinerary-date">@itinerary.Duration</div>
                <div class="itinerary-title">@itinerary.Title</div>
                <div class="itinerary-details">
                    <p>Price: @itinerary.Price</p>
                    <p>Trip Type: @itinerary.TypeofTrip</p>
                    <p>Promotion: @(itinerary.PromotionAvailable ? "Available" : "Not Available")</p>
                </div>
                <div class="itinerary-actions">
                    <a href="@($"itineraries/edit?itineraryid={itinerary.ItineraryId}")">Edit</a> |
                    <a href="@($"itineraries/details?itineraryid={itinerary.ItineraryId}")">Details</a> |
                    <a href="@($"itineraries/delete?itineraryid={itinerary.ItineraryId}")">Delete</a>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private TravelItineraryProjectContext context = default!;
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
