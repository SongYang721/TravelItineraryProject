@page "/itineraries/delete"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Administrator,User")]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Itinerary</h2>
    <hr />
    @if (itinerary is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@itinerary.Price</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Duration</dt>
            <dd class="col-sm-10">@itinerary.Duration</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@itinerary.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PromotionAvailable</dt>
            <dd class="col-sm-10">@itinerary.PromotionAvailable</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TypeofTrip</dt>
            <dd class="col-sm-10">@itinerary.TypeofTrip</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StaffId</dt>
            <dd class="col-sm-10">@itinerary.StaffId</dd>
        </dl>
        <EditForm method="post" Model="itinerary" OnValidSubmit="DeleteItinerary" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(itinerary is null)">Delete</button> |
            <a href="/itineraries">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Itinerary? itinerary;

    [SupplyParameterFromQuery]
    private int ItineraryId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        itinerary = await context.Itinerary.FirstOrDefaultAsync(m => m.ItineraryId == ItineraryId);

        if (itinerary is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteItinerary()
    {
        using var context = DbFactory.CreateDbContext();
        context.Itinerary.Remove(itinerary!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/itineraries");
    }
}
