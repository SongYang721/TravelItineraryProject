@page "/itineraryrequests/delete"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>ItineraryRequest</h2>
    <hr />
    @if (itineraryrequest is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Request Approval</dt>
            <dd class="col-sm-10">@itineraryrequest.RequestApproval</dd>
        </dl>
        @* <dl class="row"> *@
        @*     <dt class="col-sm-2">Request Travel Month & Year</dt> *@
        @*     <dd class="col-sm-10">@itineraryrequest.RequestTravelMonthYear</dd> *@
        @* </dl> *@
        <EditForm method="post" Model="itineraryrequest" OnValidSubmit="DeleteItineraryRequest" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(itineraryrequest is null)">Delete</button> |
            <a href="/itineraryrequests">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private ItineraryRequest? itineraryrequest;

    [SupplyParameterFromQuery]
    private int ItineraryRequestId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        itineraryrequest = await context.ItineraryRequest.FirstOrDefaultAsync(m => m.ItineraryRequestId == ItineraryRequestId);

        if (itineraryrequest is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteItineraryRequest()
    {
        using var context = DbFactory.CreateDbContext();
        context.ItineraryRequest.Remove(itineraryrequest!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/itineraryrequests");
    }
}
