
@page "/itineraryrequests"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Data
@using TravelItineraryProject.Domain
@implements IAsyncDisposable
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Popular Itineraries</PageTitle>

<h1 class="text-3xl font-bold text-center text-gray-800 my-6">Popular Itineraries</h1>

@if (PopularItineraries == null || !PopularItineraries.Any())
{
    <p class="text-gray-600 mt-4 text-center">There are no popular itineraries at the moment.</p>
}
else
{
    <div class="container mx-auto px-4 mt-4" style="font-family:'Poppins',sans-serif">
        <h2 class="text-2xl font-bold text-gray-800 mb-4">Most Requested Itineraries</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var itinerary in PopularItineraries)
            {
                <div class="bg-white shadow-lg rounded-lg overflow-hidden p-6 transition-transform transform hover:scale-105">
                    <div class="p-4">
                        <h3 class="text-xl font-bold text-gray-900">@itinerary.Destination</h3>
                        <p class="text-gray-700 mt-2">@itinerary.TypeOfTrip</p>
                        <p class="text-gray-500 text-sm mt-2">Requests: @itinerary.NumberOfRequests</p>

                        <div class="flex gap-2 mt-4">
                            <button class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600
                                    disabled:opacity-50 disabled:cursor-not-allowed"
                                    @onclick="() => CreateRequestAsync(itinerary)"
                                    disabled="@GetUserRequestStatus(itinerary.Id)">
                                Request
                            </button>

                            @if (LoggedInCustomerId != null && LoggedInCustomerId == itinerary.CustomerId)
                            {
                                <button class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600"
                                        @onclick="() => EditRequest(itinerary.Id)">
                                    Edit
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private TravelItineraryProjectContext context = default!;
    private List<ItineraryDisplay> PopularItineraries = new();
    private int? LoggedInCustomerId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            context = DbFactory.CreateDbContext();
            await LoadLoggedInCustomer();

            // Load only itineraries that have 3 or more requests (popular)
            PopularItineraries = await context.ItineraryRequest
                .Where(i => i.NumberOfRequests >= 3)
                .Select(i => new ItineraryDisplay
                    {
                        Id = i.ItineraryRequestId,
                        Destination = i.Destination ?? "Unknown Destination",
                        TypeOfTrip = i.TypeOfTrip ?? "Unknown",
                        NumberOfRequests = i.NumberOfRequests ?? 0,
						CustomerId = i.CustomerId
                    })
                .ToListAsync();

            Console.WriteLine("Loaded itineraries:");
            foreach (var itinerary in PopularItineraries)
            {
                Console.WriteLine($"ID: {itinerary.Id}, Destination: {itinerary.Destination}, CustomerId: {itinerary.CustomerId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading itineraries: {ex.Message}");
        }
    }

    private async Task LoadLoggedInCustomer()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userEmail = authState.User.Identity?.Name;

            if (userEmail != null)
            {
                var customer = await context.Customer.FirstOrDefaultAsync(c => c.EmailAddress == userEmail);
                LoggedInCustomerId = customer?.CustomerId;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading customer: {ex.Message}");
        }
    }

    private async Task CreateRequestAsync(ItineraryDisplay itinerary)
    {
        try
        {
            if (LoggedInCustomerId == null)
            {
                Console.WriteLine("User not logged in.");
                return;
            }

            bool alreadyRequested = await context.ItineraryRequest
                .AnyAsync(r => r.CustomerId == LoggedInCustomerId && r.ItineraryRequestId == itinerary.Id);

            if (alreadyRequested) return;

            var newRequest = new ItineraryRequest
                {
                    RequestApproval = false,
                    Destination = itinerary.Destination,
                    TypeOfTrip = itinerary.TypeOfTrip,
                    CustomerId = LoggedInCustomerId.Value,
                    StaffId = null,

                };

            context.ItineraryRequest.Add(newRequest);

            var dbItinerary = await context.ItineraryRequest.FindAsync(itinerary.Id);
            if (dbItinerary != null)
            {
                dbItinerary.NumberOfRequests = (dbItinerary.NumberOfRequests ?? 0) + 1;
                itinerary.NumberOfRequests = dbItinerary.NumberOfRequests.Value;
            }

            await context.SaveChangesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CreateRequestAsync: {ex.Message}");
        }
    }

    private void EditRequest(int itineraryId)
    {
        NavigationManager.NavigateTo($"/itineraryrequests/edit/{itineraryId}");
    }

    private bool GetUserRequestStatus(int itineraryId)
    {
        try
        {
            if (LoggedInCustomerId == null) return false;

            return context.ItineraryRequest.Any(r => r.CustomerId == LoggedInCustomerId && r.ItineraryRequestId == itineraryId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking request status: {ex.Message}");
            return false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }

    private class ItineraryDisplay
    {
        public int Id { get; set; }
        public string? Destination { get; set; }
        public string? TypeOfTrip { get; set; }
        public int NumberOfRequests { get; set; }
        public int CustomerId { get; set; } // To check ownership
    }
}
