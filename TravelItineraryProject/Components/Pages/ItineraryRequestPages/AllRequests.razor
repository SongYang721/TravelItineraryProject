@page "/itineraryrequests"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Data
@using TravelItineraryProject.Domain
@implements IAsyncDisposable
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Popular Itineraries</PageTitle>

<h1>Popular Itineraries</h1>

@if (PopularItineraries == null || !PopularItineraries.Any())
{
    <p class="text-gray-600 mt-4">There are no popular itineraries at the moment.</p>
}
else
{
    <div class="container mt-4">
        <h2 class="text-2xl font-bold text-gray-800 mb-4">Most Requested Itineraries</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var itinerary in PopularItineraries)
            {
                <div class="bg-white shadow-md rounded-lg overflow-hidden">
                    <div class="p-4">
                        <h3 class="text-xl font-bold text-gray-900">@itinerary.Destination</h3>
                        <p class="text-gray-700 mt-2">@itinerary.TypeOfTrip</p>
                        <p class="text-gray-500 text-sm mt-2">Requests: @itinerary.NumberOfRequests</p>
                        <button class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600
                                disabled:opacity-50 disabled:cursor-not-allowed"
                                @onclick="() => CreateRequestAsync(itinerary)"
                                disabled="@GetUserRequestStatus(itinerary.Id)">
                            Request
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private TravelItineraryProjectContext context = default!;
    private List<ItineraryDisplay> PopularItineraries = new();
    private int? LoggedInCustomerId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            context = DbFactory.CreateDbContext();

            // Get logged-in user
            await LoadLoggedInCustomer();

            // Load only itineraries that have 3 or more requests (popular)
            PopularItineraries = await context.ItineraryRequest
                .Where(i => i.NumberOfRequests >= 3)
                .Select(i => new ItineraryDisplay
                    {
                        Id = i.ItineraryRequestId,
                        Destination = i.Destination ?? "Unknown Destination",
                        TypeOfTrip = i.TypeOfTrip ?? "Unknown",
                        NumberOfRequests = i.NumberOfRequests ?? 0,
                    })
                .ToListAsync();

            Console.WriteLine("Popular itineraries loaded successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
    }

    private async Task LoadLoggedInCustomer()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userEmail = authState.User.Identity?.Name;

            if (userEmail != null)
            {
                var customer = await context.Customer.FirstOrDefaultAsync(c => c.EmailAddress == userEmail);
                LoggedInCustomerId = customer?.CustomerId;

                if (LoggedInCustomerId != null)
                {
                    Console.WriteLine($"LoggedInCustomerId: {LoggedInCustomerId}");
                }
                else
                {
                    Console.WriteLine("No customer found for the logged-in user.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadLoggedInCustomer: {ex.Message}");
        }
    }

    private async Task CreateRequestAsync(ItineraryDisplay itinerary)
    {
        try
        {
            if (LoggedInCustomerId == null)
            {
                Console.WriteLine("No LoggedInCustomerId. Redirecting to login...");
                return;
            }

            // Prevent duplicate requests
            bool alreadyRequested = await context.ItineraryRequest
                .AnyAsync(r => r.CustomerId == LoggedInCustomerId && r.ItineraryRequestId == itinerary.Id);

            Console.WriteLine($"Already requested status for ItineraryId {itinerary.Id}: {alreadyRequested}");
            if (alreadyRequested)
            {
                return; // User already requested this itinerary
            }

            // Add a new request
            var newRequest = new ItineraryRequest
                {
                    RequestApproval = false,
                    // RequestTravelMonthYear = DateTime.Now,
                    Destination = itinerary.Destination,
                    TypeOfTrip = itinerary.TypeOfTrip,
                    CustomerId = LoggedInCustomerId.Value,
                    StaffId = null,
                };

            context.ItineraryRequest.Add(newRequest);

            // Increment the NumberOfRequests
            var dbItinerary = await context.ItineraryRequest.FindAsync(itinerary.Id);
            if (dbItinerary != null)
            {
                dbItinerary.NumberOfRequests = (dbItinerary.NumberOfRequests ?? 0) + 1;
                itinerary.NumberOfRequests = dbItinerary.NumberOfRequests.Value;
            }

            await context.SaveChangesAsync();
            Console.WriteLine($"Request successfully created for ItineraryId {itinerary.Id}.");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CreateRequestAsync: {ex.Message}");
        }
    }

    private bool GetUserRequestStatus(int itineraryId)
    {
        try
        {
            if (LoggedInCustomerId == null)
            {
                Console.WriteLine("No LoggedInCustomerId found.");
                return false;
            }

            var status = context.ItineraryRequest
                .Any(r => r.CustomerId == LoggedInCustomerId && r.ItineraryRequestId == itineraryId);
            Console.WriteLine($"GetUserRequestStatus for ItineraryId {itineraryId}: {status}");
            return status;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in GetUserRequestStatus: {ex.Message}");
            return false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (context != null)
            {
                await context.DisposeAsync();
                Console.WriteLine("Context disposed successfully.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DisposeAsync: {ex.Message}");
        }
    }

    private class ItineraryDisplay
    {
        public int Id { get; set; }
        public string? Destination { get; set; }
        public string? TypeOfTrip { get; set; }
        public int NumberOfRequests { get; set; }
        public string? ImageUrl { get; set; }
    }
}
