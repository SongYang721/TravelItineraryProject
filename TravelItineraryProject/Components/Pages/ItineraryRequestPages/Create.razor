@page "/itineraryrequests/create"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain

@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create Itinerary</PageTitle>

<h1>Create Itinerary</h1>
<hr />

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="ItineraryRequest" OnValidSubmit="AddItineraryRequest" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3"> 
              <label for="destination" class="form-label">Destination:</label>
              <InputSelect id="destination" @bind-Value="ItineraryRequest.Destination" class="form-control"> 
                  <option value="">-- Select Destination --</option> 
                          <option value="">-- Select Destination --</option>
                          <option value="China">China</option>
                          <option value="India">India</option>
                          <option value="Japan">Japan</option>
              </InputSelect>  
               
                <ValidationMessage For="() => ItineraryRequest.Destination" class="text-danger" />
            </div>



            <div class="mb-3">
                <label for="typeoftrip" class="form-label">Type of Trip:</label>
                <InputSelect id="typeoftrip" @bind-Value="ItineraryRequest.TypeOfTrip" class="form-control">
                    <option value="">-- Select Type --</option>
                    <option value="Pleasure">Pleasure</option>
                    <option value="Business">Business</option>
                    <option value="Historical">Historical</option>
                </InputSelect>
                <ValidationMessage For="() => ItineraryRequest.TypeOfTrip" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/itineraryrequests">Back to List</a>
</div>

@code {

    private ItineraryRequest ItineraryRequest { get; set; } = new();

    // private  List<string> AvailableDestinations = new() { "Tokyo", "New York", "Paris", "Sydney", "Rome" };
    // private  List<string> AvailableTripTypes = new() { "Vacation", "Business", "Adventure", "Cultural", "Relaxation" };

    private async Task AddItineraryRequest()
    {
        
        try
        {
            using var context = DbFactory.CreateDbContext();

            // Get logged-in user's email
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userEmail = authState.User.Identity?.Name;

            if (string.IsNullOrEmpty(userEmail))
            {
                Console.WriteLine("Error: User is not logged in.");
                return;
            }

            // Find the customer
            var customer = await context.Customer.FirstOrDefaultAsync(c => c.EmailAddress == userEmail);
            if (customer == null)
            {
                Console.WriteLine($"Error: No customer found for email {userEmail}");
                return;
            }

            // Set CustomerId and default values
            ItineraryRequest.CustomerId = customer.CustomerId;
            ItineraryRequest.RequestApproval = false;
            ItineraryRequest.NumberOfRequests = 1;
           

            // Save to the database
            context.ItineraryRequest.Add(ItineraryRequest);
            await context.SaveChangesAsync();

            Console.WriteLine($"Itinerary created successfully with ID: {ItineraryRequest.ItineraryRequestId}");
            // NavigationManager.NavigateTo("/itineraryrequests");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding itinerary: {ex.Message}");
        }
    }
}
