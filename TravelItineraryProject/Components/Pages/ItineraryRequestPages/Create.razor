@page "/itineraryrequests/create"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Create Itinerary</PageTitle>

<h1>Create Itinerary</h1>
<hr />

<div class="row">
    <div class="col-md-4">
        <EditForm Model="ItineraryRequest" OnValidSubmit="AddItineraryRequest" FormName="create">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="destination" class="form-label">Destination:</label>
                <select id="destination" @bind="ItineraryRequest.Destination" class="form-select">
                    <option value="">-- Select Destination --</option>
                    @foreach (var destination in AvailableDestinations)
                    {
                        <option value="@destination">@destination</option>
                    }
                </select>
                <ValidationMessage For="() => ItineraryRequest.Destination" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="typeoftrip" class="form-label">Type of Trip:</label>
                <select id="typeoftrip" @bind="ItineraryRequest.TypeOfTrip" class="form-select">
                    <option value="">-- Select Trip Type --</option>
                    @foreach (var type in AvailableTripTypes)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <ValidationMessage For="() => ItineraryRequest.TypeOfTrip" class="text-danger" />
            </div>


            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/itineraryrequests">Back to List</a>
</div>

@code {
    private ItineraryRequest ItineraryRequest { get; set; } = new(); // ✅ Ensure ItineraryRequest is initialized

    private DateTime? TravelMonthYear { get; set; } // ✅ Temporary DateTime property for binding

    private List<string> AvailableDestinations = new() { "Tokyo", "New York", "Paris", "Sydney", "Rome" };
    private List<string> AvailableTripTypes = new() { "Vacation", "Business", "Adventure", "Cultural", "Relaxation" };

    private async Task AddItineraryRequest()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();

            //  Get logged-in user's email
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userEmail = authState.User.Identity?.Name;

            if (string.IsNullOrEmpty(userEmail))
            {
                Console.WriteLine("Error: User is not logged in.");
                return;
            }

            //  Find the customer based on email
            var customer = await context.Customer.FirstOrDefaultAsync(c => c.EmailAddress == userEmail);
            if (customer == null)
            {
                Console.WriteLine($"Error: No customer found for email {userEmail}");
                return;
            }

            // Assign values to ItineraryRequest
            ItineraryRequest.CustomerId = customer.CustomerId;
            ItineraryRequest.RequestApproval = false;
            ItineraryRequest.NumberOfRequests = 1;

            

            //  Save the itinerary
            context.ItineraryRequest.Add(ItineraryRequest);
            await context.SaveChangesAsync();

            Console.WriteLine("Itinerary created successfully.");
            NavigationManager.NavigateTo("/itineraryrequests");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding itinerary: {ex.Message}");
        }
    }
}