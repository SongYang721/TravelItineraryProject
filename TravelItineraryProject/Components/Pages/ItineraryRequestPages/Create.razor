@page "/itineraryrequests/create"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<style>

    .page {
        background: url('./Images/Background2.jpg');
        height: 100%;
        /* Center and scale the image nicely */
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }

    /* Background Styling */
    .create-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        /* background: url('./Images/Background2.jpg'); */
        /* height: 100%; */
        /* /* Center and scale the image nicely */ */
        /* background-position: center; */
        /* background-repeat: no-repeat; */
        /* background-size: cover; */
    }

    /* Form Card */
    .form-card {
        background: white;
        padding: 30px;
        border-radius: 12px;
        width: 400px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        text-align: center;
    }

        .form-card h1 {
            font-size: 2rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 20px;
        }

    /* Form Controls */
    .form-group {
        margin-bottom: 15px;
        text-align: left;
    }

    label {
        font-size: 1rem;
        font-weight: 600;
        color: #444;
    }

    select {
        width: 100%;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 1rem;
        background: #f7f7f7;
        transition: 0.3s;
    }

        select:focus {
            border-color: #ff6600;
            outline: none;
        }

    /* Buttons */
    .btn-primary {
        width: 100%;
        padding: 12px;
        font-size: 1rem;
        font-weight: bold;
        border-radius: 8px;
        border: none;
        background: #ff6600;
        color: white;
        cursor: pointer;
        transition: 0.3s;
    }

        .btn-primary:hover {
            background: #e65c00;
        }

    .back-link {
        display: block;
        margin-top: 15px;
        text-decoration: none;
        color: #333;
        font-weight: bold;
    }

        .back-link:hover {
            color: #ff6600;
        }
</style>

<div class="create-container">
    <div class="form-card">
        <h1>Create Itinerary</h1>
        <EditForm Model="ItineraryRequest" OnValidSubmit="AddItineraryRequest">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <!-- Destination -->
            <div class="form-group">
                <label for="destination">Destination:</label>
                <select id="destination" @bind="ItineraryRequest.Destination">
                    <option value="">-- Select Destination --</option>
                    @foreach (var destination in AvailableDestinations)
                    {
                        <option value="@destination">@destination</option>
                    }
                </select>
                <ValidationMessage For="() => ItineraryRequest.Destination" class="text-danger" />
            </div>

            <!-- Trip Type -->
            <div class="form-group">
                <label for="typeoftrip">Type of Trip:</label>
                <select id="typeoftrip" @bind="ItineraryRequest.TypeOfTrip">
                    <option value="">-- Select Trip Type --</option>
                    @foreach (var type in AvailableTripTypes)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <ValidationMessage For="() => ItineraryRequest.TypeOfTrip" class="text-danger" />
            </div>

            <button type="submit" class="btn-primary">Create Itinerary</button>
        </EditForm>

        <a href="/itineraryrequests" class="back-link">← Back to List</a>
    </div>
</div>

@code {
    private ItineraryRequest ItineraryRequest { get; set; } = new();
    private List<string> AvailableDestinations = new() { "Tokyo", "New York", "Paris", "Sydney", "Rome" };
    private List<string> AvailableTripTypes = new() { "Vacation", "Business", "Adventure", "Cultural", "Relaxation" };

    private async Task AddItineraryRequest()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userEmail = authState.User.Identity?.Name;

            if (string.IsNullOrEmpty(userEmail))
            {
                Console.WriteLine("Error: User is not logged in.");
                return;
            }

            var customer = await context.Customer.FirstOrDefaultAsync(c => c.EmailAddress == userEmail);
            if (customer == null)
            {
                Console.WriteLine($"Error: No customer found for email {userEmail}");
                return;
            }

            ItineraryRequest.CustomerId = customer.CustomerId;
            ItineraryRequest.RequestApproval = false;
            ItineraryRequest.NumberOfRequests = 1;

            context.ItineraryRequest.Add(ItineraryRequest);
            await context.SaveChangesAsync();

            Console.WriteLine("Itinerary created successfully.");
            NavigationManager.NavigateTo("/itineraryMyrequests");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding itinerary: {ex.Message}");
        }
    }
}