@page "/payments/create"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create Payment</PageTitle>

<h1>Create Payment</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method = "post" Model="Payment" OnValidSubmit="ProcessPayment" FormName="create">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="nameoncard" class="form-label">Name on Card:</label>
                <InputText id="nameoncard" @bind-Value="Payment.NameOnCard" class="form-control" />
                <ValidationMessage For="() => Payment.NameOnCard" class= "text-danger"/>
            </div>
            <div class="mb-3">
                <label for="cardnumber" class="form-label">Card Number:</label>
                <InputText id="cardnumber" @bind-Value="Payment.CardNumber" class="form-control" />
                <ValidationMessage For="() => Payment.CardNumber" />
            </div>
            <div class="mb-3">
                <label for="expirydateofcard" class="form-label">Expiry Date Of Card:</label>
                <InputText id="expirydateofcard" @bind-Value="Payment.ExpiryDateOfCard" class="form-control" />
                <ValidationMessage For="() => Payment.ExpiryDateOfCard" />
            </div>
            <div class="mb-3">
                <label for="securitycode" class="form-label">Security Code:</label>
                <InputText id="securitycode" @bind-Value="Payment.SecurityCode" class="form-control" />
                <ValidationMessage For="() => Payment.SecurityCode" class="text-danger"/>
            </div>
            <div class="mb-3">
                <label for="paymentstatus" class="form-label">Payment Status:</label>
                <InputCheckbox id="paymentstatus" @bind-Value="Payment.PaymentStatus" class="form-check-input" />
                <ValidationMessage For="() => Payment.PaymentStatus" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/itineraries">Back to Itineraries</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int ItineraryId { get; set; }


    [SupplyParameterFromForm]
    private Payment Payment { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        // Get the current logged-in user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity?.Name;

        if (userEmail != null)
        {
            // Find the user in the database
            var user = await context.Users.FirstOrDefaultAsync(u => u.Email == userEmail);

            if (user != null && !string.IsNullOrEmpty(user.FirstName) && !string.IsNullOrEmpty(user.LastName))
            {
                // Prepopulate the NameOnCard field
                Payment.NameOnCard = $"{user.FirstName} {user.LastName}";
            }
        }
    }

    private async Task ProcessPayment()
    {
        using var context = DbFactory.CreateDbContext();

        // Get the current logged-in user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity?.Name;

        if (userEmail == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }


        // Find the user in the database
        var user = await context.Users.FirstOrDefaultAsync(u => u.Email == userEmail);
        if (user == null || user.CustomerId == null)
        {
            Console.WriteLine("User not found or CustomerId is null.");
            return;
        }

		Payment.PaymentStatus = true; //Mark as paid

        // Check if Payment already exists for this ItineraryId
        // var existingPayment = await context.Payment
        //     .FirstOrDefaultAsync(p => p.ItineraryId == ItineraryId && p.CustomerId == user.CustomerId);

        // if (existingPayment != null)
        // {
        //     Console.WriteLine("Payment already exists for this itinerary and customer.");
        //     NavigationManager.NavigateTo("/bookings");
        //     return;
        // }

        // Populate additional data for Payment
        // Payment.ItineraryId = ItineraryId;
        // Payment.CustomerId = user.CustomerId.Value;

        // Save Payment
        context.Payment.Add(Payment);
        await context.SaveChangesAsync();

        // Populate and Save Booking Entity
        var booking = new Booking
            {
                ItineraryId = ItineraryId,
                PaymentId = Payment.PaymentId,
                CustomerId = user.CustomerId.Value,
                BookingDate = DateOnly.FromDateTime(DateTime.Now),
                BookingStatus = true //Mark as confirmed
            };

        context.Booking.Add(booking);
        await context.SaveChangesAsync();

        // Redirect to Bookings Page
        NavigationManager.NavigateTo("/bookings");
    }
}
