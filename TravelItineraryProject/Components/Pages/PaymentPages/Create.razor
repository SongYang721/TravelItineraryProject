@page "/payments/create"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<style>
    /* General Styles */
    body {
        font-family: 'Poppins', sans-serif;
        /* background: linear-gradient(135deg, #27146f, #7458b0); */
        /* color: #d1d5db; */
        /* min-height: 100vh; */
        /* margin: 0; */
        /* display: flex; */
    }

    /* Sidebar (Navbar) */
    /* .sidebar { */
    /*     width: 300px; /* Wider for better spacing */ */
    /*     height: 100vh; */
    /*     /* background-color: #1a1a2e; */ */
    /*     padding: 25px; */
    /*     position: fixed; */
    /*     left: 0; */
    /*     top: 0; */
    /*     overflow-y: auto; */
    /*     display: flex; */
    /*     flex-direction: column; */
    /* } */
    /* /* Sidebar Links */ */
    /* .sidebar ul { */
    /*     list-style-type: none; */
    /*     padding: 0; */
    /*     width: 100%; */
    /* } */
    /* .sidebar li { */
    /*     margin: 12px 0; */
    /* } */
    /* .sidebar a { */
    /*     text-decoration: none; */
    /*     color: #d1d5db; */
    /*     font-size: 16px; */
    /*     display: block; */
    /*     text-align: left; */
    /*     padding: 12px 20px; */
    /*     border-radius: 8px; */
    /*     transition: background-color 0.3s ease; */
    /* } */
    /* .sidebar a:hover { */
    /*     background-color: #343a52; */
    /* } */
    /* Main Content Area */
    .main-content {
        /* flex: 1; */
        /* display: flex; */
        /* justify-content: center; */
        /* align-items: center; */
        /* margin-left: 320px; /* Match sidebar width */ */
        /* width: calc(100% - 320px); /* Ensure content fills remaining space */ */
        /* min-height: 100vh; */
        /* padding: 40px; */
        /* box-sizing: border-box; */
    }

    /* Payment Container */
    .payment-container {
        max-width: 500px;
        width: 100%;
        /* background: #2d1781; */
        border-radius: 12px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        padding: 35px;
        /* color: #ffffff; */
        text-align: center;
        margin: auto;
    }

    /* Headings */
    h1 {
        font-size: 2rem;
        font-weight: bold;
        color: #b6c3e3;
        margin-bottom: 20px;
    }

    /* Form Styling */
    .form-group {
        margin-bottom: 20px;
        text-align: left;
    }

    .form-label {
        font-weight: bold;
        margin-bottom: 6px;
        display: block;
    }

    .form-control {
        border-radius: 8px;
        border: 1px solid #4c5aac;
        padding: 12px;
        font-size: 16px;
        width: 100%;
        /* background: #5a6ca3; */
        /* color: #ffffff; */
    }

    /* Buttons */
    .btn-primary {
        background-color: #27146f;
        border: none;
        width: 100%;
        padding: 15px;
        font-size: 18px;
        font-weight: bold;
        border-radius: 8px;
        color: #ffffff;
        transition: background-color 0.3s ease;
        margin-top: 10px;
    }

        .btn-primary:hover {
            /* background-color: #4c5aac; */
        }

    /* Footer */
    .footer {
        text-align: center;
        margin-top: 20px;
    }

        .footer a {
            text-decoration: none;
            color: #b6c3e3;
            font-weight: bold;
        }

            .footer a:hover {
                text-decoration: underline;
            }

    /* Responsive - Fix Sidebar for Smaller Screens */
    /* @@media (max-width: 768px) { */
    /*     .sidebar { */
    /*         width: 100%; */
    /*         height: auto; */
    /*         position: relative; */
    /*         padding: 15px; */
    /*     } */

    /*     .main-content { */
    /*         margin-left: 0; */
    /*         width: 100%; */
    /*         padding: 20px; */
    /*         display: flex; */
    /*         justify-content: center; */
    /*         align-items: center; */
    /*     } */
    /* } */

</style>


<div class="payment-container">
    <h1>💳 Make Payment</h1>
    <EditForm method="post" Model="Payment" OnValidSubmit="ProcessPayment" FormName="create">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-group">
            <label for="nameoncard" class="form-label">Name on Card:</label>
            <InputText id="nameoncard" @bind-Value="Payment.NameOnCard" class="form-control" placeholder="Enter name on card" />
            <ValidationMessage For="() => Payment.NameOnCard" class="text-danger" />
        </div>

        <div class="form-group">
            <label for="cardnumber" class="form-label">Card Number:</label>
            <InputText id="cardnumber" @bind-Value="Payment.CardNumber" class="form-control" placeholder="1234 5678 9012 3456" />
            <ValidationMessage For="() => Payment.CardNumber" class="text-danger" />
        </div>

        <div class="form-group">
            <label for="expirydateofcard" class="form-label">Expiry Date (MM/YY):</label>
            <InputText id="expirydateofcard" @bind-Value="Payment.ExpiryDateOfCard" class="form-control" placeholder="MM/YY" />
            <ValidationMessage For="() => Payment.ExpiryDateOfCard" class="text-danger" />
        </div>

        <div class="form-group">
            <label for="securitycode" class="form-label">Security Code:</label>
            <InputText id="securitycode" @bind-Value="Payment.SecurityCode" class="form-control" placeholder="123" />
            <ValidationMessage For="() => Payment.SecurityCode" class="text-danger" />
        </div>

        <button type="submit" class="btn-primary">Pay Now</button>
    </EditForm>

    <div class="footer">
        <a href="/itineraries">Back to Itineraries</a>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public int ItineraryId { get; set; }
    [SupplyParameterFromQuery]
    public string SelectedDateRange { get; set; } = string.Empty;



    [SupplyParameterFromForm]
    private Payment Payment { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity?.Name;

        if (userEmail != null)
        {
            var user = await context.Users.FirstOrDefaultAsync(u => u.Email == userEmail);
            if (user != null && !string.IsNullOrEmpty(user.FirstName) && !string.IsNullOrEmpty(user.LastName))
            {
                Payment.NameOnCard = $"{user.FirstName} {user.LastName}";
                Payment.PaymentStatus = false;
            }
        }
    }

    private async Task ProcessPayment()
    {
        using var context = DbFactory.CreateDbContext();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity?.Name;

        if (userEmail == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var user = await context.Users.FirstOrDefaultAsync(u => u.Email == userEmail);
        if (user == null || user.CustomerId == null)
        {
            Console.WriteLine("User not found or CustomerId is null.");
            return;
        }

        Payment.PaymentStatus = true;
        context.Payment.Add(Payment);
        await context.SaveChangesAsync();

        var booking = new Booking
            {
                ItineraryId = ItineraryId,
                PaymentId = Payment.PaymentId,
                CustomerId = user.CustomerId.Value,
                SelectedDateRange = SelectedDateRange,
                BookingStatus = true

            };

        context.Booking.Add(booking);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/bookings");
    }
}