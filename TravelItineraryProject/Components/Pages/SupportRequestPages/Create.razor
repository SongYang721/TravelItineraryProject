@page "/support/request"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Administrator,User")]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>SupportRequest</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="SupportRequest" OnValidSubmit="AddSupportRequest" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="comments" class="form-label">Comments:</label> 
                <InputText id="comments" @bind-Value="SupportRequest.Comments" class="form-control" /> 
                <ValidationMessage For="() => SupportRequest.Comments" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="typeofsupport" class="form-label">TypeofSupport:</label> 
                <InputText id="typeofsupport" @bind-Value="SupportRequest.TypeofSupport" class="form-control" /> 
                <ValidationMessage For="() => SupportRequest.TypeofSupport" class="text-danger" /> 
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/supportrequests">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private SupportRequest SupportRequest { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddSupportRequest()
    {
        using var context = DbFactory.CreateDbContext();

        // Get the logged-in user's information
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity?.Name;
        var user = await context.Users.FirstOrDefaultAsync(u => u.Email == userEmail);

        // Set UserId to the logged-in user's ID
        // Assuming the UserId is stored in the claim or can be retrieved from a service
        SupportRequest.CustomerId = user.CustomerId.Value;
        SupportRequest.Assisted = false;
        SupportRequest.StaffId = null;

        context.SupportRequest.Add(SupportRequest);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/supportrequests");
    }
}
