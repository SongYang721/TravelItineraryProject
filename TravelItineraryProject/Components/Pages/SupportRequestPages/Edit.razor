@page "/supportrequests/respond"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Administrator,Staff")]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>SupportRequest</h2>
<hr />
@if (SupportRequest is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="SupportRequest" OnValidSubmit="UpdateSupportRequest" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="SupportRequest.SupportRequestId" value="@SupportRequest.SupportRequestId" />
                <div class="mb-3">
                    <label for="comments" class="form-label">Comments:</label>
                    <InputText id="comments" @bind-Value="SupportRequest.Comments" class="form-control" />
                    <ValidationMessage For="() => SupportRequest.Comments" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="typeofsupport" class="form-label">TypeofSupport:</label>
                    <InputText id="typeofsupport" @bind-Value="SupportRequest.TypeofSupport" class="form-control" />
                    <ValidationMessage For="() => SupportRequest.TypeofSupport" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="customerid" class="form-label">CustomerId:</label>
                    <InputNumber id="customerid" @bind-Value="SupportRequest.CustomerId" class="form-control" />
                    <ValidationMessage For="() => SupportRequest.CustomerId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="responds" class="form-label">Responds:</label>
                    <InputText id="responds" @bind-Value="SupportRequest.Responds" class="form-control" />
                    <ValidationMessage For="() => SupportRequest.Responds" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/supportrequests">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int SupportRequestId { get; set; }

    [SupplyParameterFromForm]
    private SupportRequest? SupportRequest { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        SupportRequest ??= await context.SupportRequest.FirstOrDefaultAsync(m => m.SupportRequestId == SupportRequestId);

        if (SupportRequest is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateSupportRequest()
    {
        using var context = DbFactory.CreateDbContext();

        // Get the logged-in user's information
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity?.Name;
        var user = await context.Users.FirstOrDefaultAsync(u => u.Email == userEmail);

        // Set UserId to the logged-in user's ID
        // Assuming the UserId is stored in the claim or can be retrieved from a service
        SupportRequest.StaffId = user.StaffId.Value;
        SupportRequest.Assisted = true;

        context.Attach(SupportRequest!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SupportRequestExists(SupportRequest!.SupportRequestId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/supportrequests");
    }

    private bool SupportRequestExists(int supportrequestid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.SupportRequest.Any(e => e.SupportRequestId == supportrequestid);
    }
}
