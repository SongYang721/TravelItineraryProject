<style>
    .card {
        max-width: 800px;
        margin: auto;
        padding: 16px;
        border: 1px solid #ddd;
        border-radius: 8px;
        display: flex;
        align-items: flex-start;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

        .card img {
            width: 250px;
            height: auto;
            border-radius: 8px;
            margin-right: 16px;
        }

        .card h3 {
            margin: 0;
            font-size: 24px;
        }

        .card .form-group {
            margin-bottom: 16px;
        }

        .card button {
            margin-right: 8px;
        }
</style>

@page "/bookings/edit/{bookingId:int}"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Administrator,User")]

<PageTitle>Edit Booking</PageTitle>

<h1>Edit Booking</h1>
<hr />

@if (Booking is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <!-- Image Section (Check for null) -->
        @if (!string.IsNullOrEmpty(Booking?.Itinerary?.ImageUrl))
        {
            <img src="@($"/{Booking.Itinerary.ImageUrl}")" alt="@Booking.Itinerary.Title" />
        }
        else
        {
            <p><strong>Itinerary image not available.</strong></p>
        }
       
        <div style="flex: 1;">
            <h3>@(Booking?.Itinerary?.Title ?? "No Title Available")</h3>
            <p><strong>Description:</strong> @(Booking?.Itinerary?.Description ?? "No Description Available")</p>
            <p><strong>Duration:</strong> @(Booking?.Itinerary?.Duration ?? 0) days</p>

            <!-- Booking Date Update -->
            <EditForm Model="Booking" OnValidSubmit="UpdateBooking" FormName="edit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="bookingdate"><strong>Edit Booking Date:</strong></label>
                    <InputDate id="bookingdate" @bind-Value="Booking.BookingDateAsDateTime" class="form-control" @onchange="UpdateState" />
                    <ValidationMessage For="() => Booking.BookingDate" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>

            <!-- Action Buttons -->
            <div style="margin-top: 16px;">
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </div>
    </div>
}

<div>
    <a href="/bookings">Back to List</a>
</div>

@code {
    [Parameter] public int BookingId { get; set; }
    private Booking? Booking { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Booking = await context.Booking
            .Include(b => b.Itinerary)
            .Include(b => b.Payment)
            .FirstOrDefaultAsync(m => m.BookingId == BookingId);

        if (Booking is null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }

    private async Task ConfirmDelete()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this booking?"))
        {
            await DeleteBooking();
        }
    }

    private async Task DeleteBooking()
    {
        using var context = DbFactory.CreateDbContext();
        if (Booking != null)
        {
            context.Booking.Remove(Booking);
            await context.SaveChangesAsync();
        }
        NavigationManager.NavigateTo("/bookings");
    }

    private async Task UpdateBooking()
    {
        if (Booking == null)
        {
            Console.WriteLine("Booking is null. Cannot update.");
            return;
        }

        Console.WriteLine($"Before saving: BookingId {Booking.BookingId}, Selected BookingDate: {Booking.BookingDate}");

        using var context = DbFactory.CreateDbContext();
        context.Attach(Booking);

        // Explicitly mark the BookingDate as modified
        context.Entry(Booking).Property(b => b.BookingDate).IsModified = true;

        try
        {
            await context.SaveChangesAsync();
            Console.WriteLine($"After saving: BookingId {Booking.BookingId}, Saved BookingDate: {Booking.BookingDate}");
            NavigationManager.NavigateTo("/bookings");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating booking: {ex.Message}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/bookings");
    }

    private void UpdateState(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out DateTime newDate))
        {
            Booking.BookingDateAsDateTime = newDate;
            StateHasChanged(); // Force UI Refresh
            Console.WriteLine($"Date changed: {Booking.BookingDate}");
        }
    }
}
