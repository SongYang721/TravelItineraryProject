@page "/bookings/edit"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Booking</h2>
<hr />
@if (Booking is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Booking" OnValidSubmit="UpdateBooking" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Booking.BookingId" value="@Booking.BookingId" />
                <div class="mb-3">
                    <label for="bookingdate" class="form-label">BookingDate:</label>
                    <InputDate id="bookingdate" @bind-Value="Booking.BookingDate" class="form-control" />
                    <ValidationMessage For="() => Booking.BookingDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="customerid" class="form-label">CustomerId:</label>
                    <InputNumber id="customerid" @bind-Value="Booking.CustomerId" class="form-control" />
                    <ValidationMessage For="() => Booking.CustomerId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="itineraryid" class="form-label">ItineraryId:</label>
                    <InputNumber id="itineraryid" @bind-Value="Booking.ItineraryId" class="form-control" />
                    <ValidationMessage For="() => Booking.ItineraryId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="paymentid" class="form-label">PaymentId:</label>
                    <InputNumber id="paymentid" @bind-Value="Booking.PaymentId" class="form-control" />
                    <ValidationMessage For="() => Booking.PaymentId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="staffid" class="form-label">StaffId:</label>
                    <InputNumber id="staffid" @bind-Value="Booking.StaffId" class="form-control" />
                    <ValidationMessage For="() => Booking.StaffId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/bookings">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int BookingId { get; set; }

    [SupplyParameterFromForm]
    private Booking? Booking { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Booking ??= await context.Booking.FirstOrDefaultAsync(m => m.BookingId == BookingId);

        if (Booking is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBooking()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Booking!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BookingExists(Booking!.BookingId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/bookings");
    }

    private bool BookingExists(int bookingid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Booking.Any(e => e.BookingId == bookingid);
    }
}
