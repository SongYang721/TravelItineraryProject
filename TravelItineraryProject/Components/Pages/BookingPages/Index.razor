@page "/bookings"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TravelItineraryProject.Domain
@using TravelItineraryProject.Data
@implements IAsyncDisposable
@rendermode InteractiveServer
@inject IDbContextFactory<TravelItineraryProjectContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Administrator, Staff, User")]

<PageTitle>Bookings</PageTitle>

<h1>Bookings</h1>
<AuthorizeView Roles="Administrator, Staff">
    <p>
        <a href="bookings/create">Create New</a>
    </p>
</AuthorizeView>

<QuickGrid TItem ="Booking" Class="table" Items="@bookings">
    <PropertyColumn Property="booking => booking.BookingDate" />
    <PropertyColumn Property="booking => booking.Itinerary.Title" />
    <PropertyColumn Property="booking => booking.Itinerary.Duration" />
    <PropertyColumn Property="booking => booking.PaymentDisplayStatus" />
    @* <PropertyColumn Property="booking => booking.StaffId" title="CheckedByStaffId" /> *@
    @* <PropertyColumn Property="booking => booking.BookingStatus" Title="ApprovalStatus" /> *@

    <TemplateColumn Context="booking">
        <AuthorizeView Roles="Administrator, User">
            <a href="@($"/bookings/edit/{booking.BookingId}")">Edit</a>
            <a href="@($"bookings/details?bookingid={booking.BookingId}")">Details</a> |
            <a href="@($"bookings/delete?bookingid={booking.BookingId}")">Delete</a>
        </AuthorizeView>
        @* <AuthorizeView Roles="Administrator, Staff"> *@
        @*     <button class="btn @(booking.BookingStatus ? "btn-danger" : "btn-success")" *@
        @*             @onclick="() => ToggleBookingStatus(booking.BookingId)"> *@
        @*         @(booking.BookingStatus ? "Decline" : "Approve") *@
        @*     </button> *@
        @* </AuthorizeView> *@
    </TemplateColumn>
</QuickGrid>

@code {
    private TravelItineraryProjectContext context = default!;
    private bool contextInitialized = false;
    private IList<Booking> userBookings = new List<Booking>();
    IQueryable<Booking> bookings => userBookings.AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        // Initialize the DbContext
        context = await DbFactory.CreateDbContextAsync();
        contextInitialized = true;

        // Filter bookings for the current user
        await LoadUserBookings();

    }

    private async Task LoadUserBookings()
    {
        // Get the currently logged-in user's email
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity?.Name;
        if (userEmail != null)
        {
            // Look up the user in the database by their email
            var user = await context.Users.FirstOrDefaultAsync(u => u.Email == userEmail);
            var customer = await context.Customer.FirstOrDefaultAsync(c => c.EmailAddress == userEmail);
            if (customer!= null)
            {
                // Filter bookings for the current user
                userBookings  = await context.Booking
                .Include(b => b.Itinerary)
                .Include(b => b.Payment)
                .Where(b => b.CustomerId == customer.CustomerId).ToListAsync();

                foreach (var booking in userBookings)
                {
                    booking.Itinerary.Title ??= "N/A"; // Default if null
                    booking.Itinerary.Duration ??= 0; // Default if null
                    booking.PaymentDisplayStatus = booking.Payment?.PaymentStatus == true ? "Paid" : "Pending";
                }
			}
		}
	}

    private async Task ToggleBookingStatus(int bookingId)
    {
        // Use a new DbContext instance for any updates to avoid concurrency issues
        using var updateContext = await DbFactory.CreateDbContextAsync();
        var booking = await updateContext.Booking.FindAsync(bookingId);

        if (booking != null)
        {
            // Toggle the booking status
            booking.BookingStatus = !booking.BookingStatus;

            // Get the currently logged-in user's staff ID
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userEmail = authState.User.Identity?.Name;

            if (userEmail != null)
            {
                // Look up the staff member in the database by their email
                var staff = await updateContext.Staff.FirstOrDefaultAsync(s => s.Email == userEmail);

                if (staff != null)
                {
                    // Update the StaffId field with the logged-in staff member's ID
                    booking.StaffId = staff.StaffId;
                }
            }

            // Save changes to the database
            await updateContext.SaveChangesAsync();
        }

        // Refresh the bookings list
        await RefreshBookings();
    }

    private async Task RefreshBookings()
    {
        if (!contextInitialized) return;

        // Reload data for context.Booking
        await context.Entry(context.Booking).ReloadAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }
}
