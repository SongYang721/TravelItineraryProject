@page "/bookings"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TravelItineraryProject.Domain
@using TravelItineraryProject.Data
@implements IAsyncDisposable
@rendermode InteractiveServer
@inject IDbContextFactory<TravelItineraryProjectContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator, Staff, User")]

<PageTitle>Bookings</PageTitle>

<style>
    .booking-container {
        max-width: 1200px;
        margin: 40px auto;
        background: white;
        padding: 30px;
        border-radius: 15px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        color: #333;
        text-align: center;
    }

    .booking-header {
        font-size: 28px;
        margin-bottom: 25px;
        font-weight: bold;
        color: #f0ad4e;
        text-transform: uppercase;
    }

    .table-container {
        width: 100%;
        overflow-x: auto;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        text-align: left;
    }

        .table th, .table td {
            padding: 12px;
            border: 1px solid #ddd;
        }

        .table th {
            background: #f0ad4e;
            color: white;
        }

        .table tr:nth-child(even) {
            background: #f9f9f9;
        }

    .action-buttons button, .action-buttons a {
        margin: 5px;
        padding: 8px 12px;
        text-decoration: none;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .btn-info {
        background: #5bc0de;
        color: white;
    }

    .btn-danger {
        background: #d9534f;
        color: white;
    }

    .btn-success {
        background: #5cb85c;
        color: white;
    }
</style>

<div class="booking-container">
    <div class="booking-header">Bookings</div>
    <div class="table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>Date Range</th>
                    <th>Itinerary</th>
                    <th>Duration</th>
                    <th>Payment Status</th>
                    <th>Booking Approval</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in bookings)
                {
                    <tr>
                        <td>@booking.SelectedDateRange</td>
                        <td>@booking.Itinerary.Title</td>
                        <td>@booking.Itinerary.Duration</td>
                        <td>@booking.PaymentDisplayStatus</td>
                        <td>@(booking.BookingStatus ? "Approved" : "Unapproved")</td>
                        <td class="action-buttons">
                            <AuthorizeView Roles="Administrator, User">
                                <button class="btn-info" @onclick="() => NavigateToEdit(booking.BookingId)">Edit</button>
                            </AuthorizeView>
                            <AuthorizeView Roles="Administrator">
                                <a class="btn-danger" href="@($"bookings/details?bookingid={booking.BookingId}")">Details</a>
                                <a class="btn-danger" href="@($"bookings/delete?bookingid={booking.BookingId}")">Delete</a>
                            </AuthorizeView>
                            <AuthorizeView Roles="Administrator, Staff">
                                <button class="btn @(booking.BookingStatus ? "btn-danger" : "btn-success")"
                                        @onclick="() => ToggleBookingStatus(booking.BookingId)">
                                    @(booking.BookingStatus ? "Decline" : "Approve")
                                </button>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private TravelItineraryProjectContext context = default!;
    private bool contextInitialized = false;
    private IList<Booking> userBookings = new List<Booking>();
    IQueryable<Booking> bookings => userBookings.AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();
        contextInitialized = true;
        await LoadUserBookings();
    }
    private void NavigateToEdit(int bookingId) => NavigationManager.NavigateTo($"/bookings/edit/{bookingId}");

    private async Task LoadUserBookings()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity?.Name;
        if (userEmail != null)
        {
            var customer = await context.Customer.FirstOrDefaultAsync(c => c.EmailAddress == userEmail);
            var staff = await context.Staff.FirstOrDefaultAsync(s => s.Email == userEmail);
            if (customer != null)
            {
                userBookings = await context.Booking.Include(b => b.Itinerary).Include(b => b.Payment)
                    .Where(b => b.CustomerId == customer.CustomerId).ToListAsync();
                foreach (var booking in userBookings)
                {
                    booking.PaymentDisplayStatus = booking.Payment?.PaymentStatus == true ? "Paid" : "Pending";
                }
            }
            if (staff != null)
            {
                userBookings = await context.Booking.Include(b => b.Itinerary).Include(b => b.Payment).ToListAsync();
                foreach (var booking in userBookings)
                {
                    booking.PaymentDisplayStatus = booking.Payment?.PaymentStatus == true ? "Paid" : "Pending";
                }
            }
        }
    }

    private async Task ToggleBookingStatus(int bookingId)
    {
        using var updateContext = await DbFactory.CreateDbContextAsync();
        var booking = await updateContext.Booking.FindAsync(bookingId);
        if (booking != null)
        {
            booking.BookingStatus = !booking.BookingStatus;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userEmail = authState.User.Identity?.Name;
            if (userEmail != null)
            {
                var staff = await updateContext.Staff.FirstOrDefaultAsync(s => s.Email == userEmail);
                if (staff != null)
                {
                    booking.StaffId = staff.StaffId;
                }
            }
            await updateContext.SaveChangesAsync();
        }
        await RefreshBookings();
    }

    private async Task RefreshBookings()
    {
        if (!contextInitialized) return;
        await context.Entry(context.Booking).ReloadAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }
}
