@page "/bookings/create"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryProject.Domain
@inject IDbContextFactory<TravelItineraryProject.Data.TravelItineraryProjectContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Booking</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Booking" OnValidSubmit="AddBooking" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="bookingdate" class="form-label">BookingDate:</label> 
                <InputDate id="bookingdate" @bind-Value="Booking.BookingDate" class="form-control" /> 
                <ValidationMessage For="() => Booking.BookingDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="customerid" class="form-label">CustomerId:</label> 
                <InputNumber id="customerid" @bind-Value="Booking.CustomerId" class="form-control" /> 
                <ValidationMessage For="() => Booking.CustomerId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="itineraryid" class="form-label">ItineraryId:</label> 
                <InputNumber id="itineraryid" @bind-Value="Booking.ItineraryId" class="form-control" /> 
                <ValidationMessage For="() => Booking.ItineraryId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="paymentid" class="form-label">PaymentId:</label> 
                <InputNumber id="paymentid" @bind-Value="Booking.PaymentId" class="form-control" /> 
                <ValidationMessage For="() => Booking.PaymentId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="staffid" class="form-label">StaffId:</label> 
                <InputNumber id="staffid" @bind-Value="Booking.StaffId" class="form-control" /> 
                <ValidationMessage For="() => Booking.StaffId" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/bookings">Back to List</a>
</div>

@code {
<<<<<<< HEAD
=======
    // // Create a string to store the CustomerId, default value is "System".
    // private string CustomerId = "System";

    // // Inject the AuthenticationStateProvider to get the CustomerId.
    // @inject AuthenticationStateProvider authenticationStateProvider

    // // Override the OnInitialized method to get the CustomerId.
    // protected override async void OnInitialized()
    // {
    //     var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
    //     var user = authState.User;

    //     // Get the CustomerId claim
        // var CustomerIdClaim = user.FindFirst("CustomerId");
        // if (CustomerIdClaim != null)
        // {
        //     CustomerId = CustomerIdClaim.Value;
        // }
    // }
>>>>>>> 1d8231b5b524788a1de22553ed6e0f84b0b32d30

    [SupplyParameterFromForm]
    private Booking Booking { get; set; } = new()
        {
            BookingDate = DateOnly.FromDateTime(DateTime.Now)

        };



    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddBooking()
    {
        using var context = DbFactory.CreateDbContext();
        context.Booking.Add(Booking);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/bookings");

    }
}
